"use strict";(self.webpackChunklangchain=self.webpackChunklangchain||[]).push([[1685],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>d});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),c=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},u=function(e){var a=c(e.components);return n.createElement(p.Provider,{value:a},e.children)},s="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=c(t),m=r,d=s["".concat(p,".").concat(m)]||s[m]||g[m]||l;return t?n.createElement(d,o(o({ref:a},u),{},{components:t})):n.createElement(d,o({ref:a},u))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[s]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9979:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=t(7462),r=(t(7294),t(3905));const l={sidebar_position:2},o="Usage",i={unversionedId:"llm/usage",id:"llm/usage",title:"Usage",description:"OpenAI",source:"@site/docs/llm/usage.md",sourceDirName:"llm",slug:"/llm/usage",permalink:"/langchainrb-docs/docs/llm/usage",draft:!1,editUrl:"https://github.com/alchaplinsky/lcrb/tree/main/packages/create-docusaurus/templates/shared/docs/llm/usage.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/langchainrb-docs/docs/llm/intro"},next:{title:"Prompts",permalink:"/langchainrb-docs/docs/category/prompts"}},p={},c=[{value:"OpenAI",id:"openai",level:2},{value:"Cohere",id:"cohere",level:2},{value:"HuggingFace",id:"huggingface",level:2},{value:"Replicate",id:"replicate",level:2},{value:"Google PaLM (Pathways Language Model)",id:"google-palm-pathways-language-model",level:2},{value:"AI21",id:"ai21",level:2}],u={toc:c},s="wrapper";function g(e){let{components:a,...t}=e;return(0,r.kt)(s,(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usage"},"Usage"),(0,r.kt)("h2",{id:"openai"},"OpenAI"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},'gem "ruby-openai", "~> 4.0.0"')," to your Gemfile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'openai = Langchain::LLM::OpenAI.new(api_key: ENV["OPENAI_API_KEY"])\n')),(0,r.kt)("p",null,"You can pass additional parameters to the constructor, it will be passed to the OpenAI client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'openai = Langchain::LLM::OpenAI.new(api_key: ENV["OPENAI_API_KEY"], llm_options: {uri_base: "http://localhost:1234"}) )\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'openai.embed(text: "foo bar")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'openai.complete(prompt: "What is the meaning of life?")\n')),(0,r.kt)("h2",{id:"cohere"},"Cohere"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},'gem "cohere-ruby", "~> 0.9.3"')," to your Gemfile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'cohere = Langchain::LLM::Cohere.new(api_key: ENV["COHERE_API_KEY"])\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'cohere.embed(text: "foo bar")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'cohere.complete(prompt: "What is the meaning of life?")\n')),(0,r.kt)("h2",{id:"huggingface"},"HuggingFace"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},'gem "hugging-face", "~> 0.3.2"')," to your Gemfile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'hugging_face = Langchain::LLM::HuggingFace.new(api_key: ENV["HUGGING_FACE_API_KEY"])\n')),(0,r.kt)("h2",{id:"replicate"},"Replicate"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},'gem "replicate-ruby", "~> 0.2.2"')," to your Gemfile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'replicate = Langchain::LLM::Replicate.new(api_key: ENV["REPLICATE_API_KEY"])\n')),(0,r.kt)("h2",{id:"google-palm-pathways-language-model"},"Google PaLM (Pathways Language Model)"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},'"google_palm_api", "~> 0.1.2"')," to your Gemfile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'google_palm = Langchain::LLM::GooglePalm.new(api_key: ENV["GOOGLE_PALM_API_KEY"])\n')),(0,r.kt)("h2",{id:"ai21"},"AI21"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},'gem "ai21", "~> 0.2.1"')," to your Gemfile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},'ai21 = Langchain::LLM::AI21.new(api_key: ENV["AI21_API_KEY"])\n')))}g.isMDXComponent=!0}}]);